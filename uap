#!/usr/bin/env bash
"exec" "`dirname $0`/python_env/bin/python" "$0" "$@"


import os
uap_path = os.path.dirname(os.path.realpath(__file__))
activate_this_file = '%s/python_env/bin/activate_this.py' % uap_path
execfile(activate_this_file, dict(__file__=activate_this_file))
import argparse
import logging
import string
import sys
import yaml

'''
Adjust sys.path so everything we need can be found
'''

if uap_path not in sys.path:
    sys.path.append(uap_path)
include_path = '%s/include' % uap_path
if include_path not in sys.path:
    sys.path.append(include_path)
sources_path = '%s/include/sources' % uap_path
if sources_path not in sys.path:
    sys.path.append(sources_path)
steps_path = '%s/include/steps' % uap_path
if steps_path not in sys.path:
    sys.path.append(steps_path)
subcommand_path = '%s/include/subcommands' % uap_path
if subcommand_path not in sys.path:
    sys.path.append(subcommand_path)

from include.subcommands import *

def main():
    '''
    Set environment variables for git, so it does use the correct repository
    '''
    os.environ["GIT_DIR"] = "%s/.git" % uap_path
    os.environ["GIT_WORK_TREE"] = uap_path
    
    '''
    This script allows access to all commands which are provided by the pipeline.
    '''
    
    # Definition of common parser(s)
    
    common_parser = argparse.ArgumentParser(
        add_help=False,
        formatter_class=argparse.RawTextHelpFormatter
    )
    
    common_parser.add_argument(
        "--even-if-dirty",
        dest="even_if_dirty",
        action="store_true",
        default=False,
        help="Must be set if the local git repository contains uncommited "
        "changes. Otherwise the pipeline will not start.")
    
    # Definition of the final parser
    
    parser = argparse.ArgumentParser(
        description="This script starts and controls 'uap' analysis.",
        epilog="For further information please visit "
        "http://uap.readthedocs.org/en/latest/\n"
        "For citation use ...",
        formatter_class=argparse.RawTextHelpFormatter
        )
    
    parser.add_argument(
        "config",
        help="Path to YAML file which holds the pipeline configuration. It has "
        "to follow the structure given in the documentation.",
        metavar="<project-config>.yaml",
        nargs='?',
        type=argparse.FileType('r'))



    parser.add_argument(
        "--uap-path",
	dest="uap_path",
        help="temporary workaround for path",
	default=uap_path,
        type=str)
    
    parser.add_argument(
        "-v", "--verbose",
        dest="verbose",
        action="count", 
        default=0,
        help="Increase output verbosity")
    
    parser.add_argument(
        "--version",
        dest="version",
        action="version",
        version="%(prog)s 0.01 alpha",
        help = "Display version information.")

    subparsers = parser.add_subparsers(
        title="subcommands", 
        description="Available subcommands.")
    
    '''
    The argument parser for 'fix-problems.py' is created here."
    '''
    
    fix_problems_parser = subparsers.add_parser(
        "fix-problems",
        help="Fixes problematic states by removing stall files.",
        description="",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    fix_problems_parser.add_argument(
        "--cluster",
        dest="cluster",
        type=str,
        default="auto",
        help="Specify the cluster type (sge, slurm), defaults to auto.")

    fix_problems_parser.add_argument(
        "--details",
        dest="details",
        action="store_true",
        default=False,
        help="Displays information about problematic files which need to be "
        "deleted to fix problem.")

    fix_problems_parser.add_argument(
        "--srsly",
        dest="srsly",
        action="store_true",
        default=False,
        help="Deletes problematic files.")
    
    fix_problems_parser.set_defaults(func=fix_problems.main)
    
    '''
    The argument parser for 'render.py' is created here."
    '''
    
    render_parser = subparsers.add_parser(
        "render",
        help="Renders DOT-graphs displaying information of the analysis.",
        description="'render' generates DOT-graphs. Without arguments "
        "it takes the log file of each task and generates a graph, showing "
        "details of the computation.",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    render_parser.add_argument(
        "--files",
        dest="files",
        action="store_true",
        default=False,
        help="Renders a graph showing all files of the analysis. "
        "[Not implemented yet!]")
    
    render_parser.add_argument(
        "--steps",
        dest="steps",
        action="store_true",
        default=False,
        help="Renders a graph showing all steps of the analysis and their "
        "connections.")

    render_parser.add_argument(
        "--simple",
        dest = "simple",
        action = "store_true",
        default = False,
        help = "Rendered graphs are simplified.")

    render_parser.add_argument(
        "step_task",
        nargs='*',
        default=list(),
        type=str,
        help="Displays only the named task IDs. Can take multiple task ID(s) "
        "as input. A task ID looks like this 'step_name/run_id'. A list of all "
        "task IDs is returned by running 'uap <project-config>.yaml status'.")
    
    render_parser.set_defaults(func=render.main)

    '''
    The argument parser for 'report.py' is created here."
    '''
    
    report_parser = subparsers.add_parser(
        "report",
        help="Generates reports of steps which can do so.",
        description="",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    report_parser.add_argument(
        "step_task",
        nargs='*',
        default=list(),
        type=str,
        help="Can take multiple step names as input. A step name is the name "
        "of any entry in the 'steps:' section as defined in "
        "'<project-config>.yaml'. A list of all task IDs is returned by "
        "running 'uap <project-config>.yaml status'.")
    
    report_parser.set_defaults(func=report.main)
    
    '''
    The argument parser for 'run_locally.py' is created here."
    '''
    
    run_locally_parser = subparsers.add_parser(
        "run-locally",
        help="Executes the analysis on the local machine.",
        description="This command  starts 'uap' on the local machine. "
        "It can be used to start:\n"
        " * all tasks of the pipeline as configured in <project-config>.yaml\n"
        " * all tasks defined by a specific step in <project-config>.yaml\n"
        " * one or more steps\n"
        "To start the complete pipeline as configured in <project-config>.yaml "
        "execute:\n"
        "$ uap <project-config>.yaml run-locally\n"
        "To start a specific step execute:\n"
        "$ uap <project-config>.yaml run-locally <step_name>\n"
        "To start a specific task execute:\n"
        "$ uap <project-config>.yaml run-locally <step_name/run_id>\n"
        "The step_name is the name of an entry in the 'steps:' section "
        "as defined in '<project-config>.yaml'. A specific task is defined via "
        "its task ID 'step_name/run_id'. A list of all task IDs is " 
        "returned by running:\n"
        "$ uap <project-config>.yaml status",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    run_locally_parser.add_argument(
        "step_task",
        nargs='*',
        default=list(),
        type=str,
        help="Can take multiple step names as input. A step name is the name "
        "of any entry in the 'steps:' section as defined in '<config>.yaml'. "
        "A list of all task IDs is returned by running:\n"
        "$ uap <project-config>.yaml status.")
    
    run_locally_parser.set_defaults(func=run_locally.main)
    
    '''
    The argument parser for 'status.py' is created here.
    '''
    
    status_parser = subparsers.add_parser(
        "status",
        help="Displays information about the status of the analysis.",
        description="This script displays by default information about all "
        "tasks of the pipeline as configured in '<project-config>.yaml'. But "
        "the displayed information can be narrowed down via command line "
        "options.\n"
        "IMPORTANT: Hints given by this script are just valid if the jobs were "
        "submitted to the cluster.",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    status_parser.add_argument(
        "--cluster",
        dest="cluster",
        type=str,
        default="auto",
        help="Specify the cluster type (sge, slurm), defaults to auto.")

    status_parser.add_argument(
        "--summarize",
        dest="summarize",
        action="store_true",
        default=False,
        help="Displays summarized information of the analysis.")

    status_parser.add_argument(
        "--graph",
        dest="graph",
        action="store_true",
        default=False,
        help="Displays the dependency graph of the analysis.")

    status_parser.add_argument(
        "--sources",
        dest="sources",
        action="store_true",
        default=False,
        help="Displays only information about the source runs.")
    
    status_parser.add_argument(
        "-t","--task",
        dest="task",
        nargs='*',
        default=list(),
        type=str,
        help="Displays only the named task IDs. Can take multiple task ID(s) "
        "as input. A task ID looks like ths 'step_name/run_id'. A list of all "
        "task IDs is returned by running:\n"
        "$ uap <project-config>.yaml status")
    
    status_parser.set_defaults(func=status.main)
    
    '''
    The argument parser for 'steps.py' is created here.
    '''
    
    steps_parser = subparsers.add_parser(
        "steps",
        help="Displays information about the steps available in UAP.",
        description="This script displays by default a list of all "
        "steps the pipeline can use.\n",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    steps_parser.add_argument(
        "--show",
        dest="step",
        type=str,
        default="",
        help="Show the details of a specific step.")
    
    steps_parser.set_defaults(func=steps.main)
    
    '''
    The argument parser for 'submit-to-cluster.py' is created here."
    '''
    
    submit_to_cluster_parser = subparsers.add_parser(
        "submit-to-cluster",
        help="Submits the jobs created by the seq-pipeline to a cluster",
        description="This script submits all tasks configured in "
        "<project-config>.yaml to a SGE/OGE/UGE or SLURM cluster. The list of "
        "tasks can be narrowed down by specifying a step name (in which case all "
        "runs of this steps will be considered) or individual tasks "
        "(step_name/run_id).",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])

    submit_to_cluster_parser.add_argument(
        "--cluster",
        dest="cluster",
        type=str,
        default="auto",
        help="Specify the cluster type. Choices: [auto, sge, slurm]. "
        "Default: [auto].")

    submit_to_cluster_parser.add_argument(
        "step_task",
        nargs='*',
        default=list(),
        type=str,
        help="Can take multiple step names as input. A step name is the name "
        "of any entry in the 'steps:' section as defined in "
        "'<project-config>.yaml'. A list of all task IDs is returned by "
        "running:\n"
        "$ uap <project-config>.yaml status")

    submit_to_cluster_parser.set_defaults(func=submit_to_cluster.main)

    '''
    The argument parser for 'task-info.py' is created here."
    '''
    
    task_info_parser = subparsers.add_parser(
        "task-info",
        help="Displays information about certain source or processing tasks.",
        description="",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    task_info_parser.add_argument(
         "--sources",
        dest="sources",
        action="store_true",
        default=False,
        help="Displays only information about the source runs.")
    
    task_info_parser.add_argument(
        "-t","--task",
        dest="task",
        nargs='*',
        default=list(),
        type=str,
        help="Displays only the named task IDs. Can take multiple task ID(s) "
        "as input. A task ID looks like ths 'step_name/run_id'. A list of all "
        "task IDs is returned by running:\n"
        "$ uap <project-config>.yaml status")

    task_info_parser.set_defaults(func=task_info.main)
        
    '''
    The argument parser for 'volatilize.py' is created here."
    '''
    
    volatilize_parser = subparsers.add_parser(
        "volatilize",
        help="Saves disk space by volatilizing intermediate results",
        description="Save disk space by volatilizing intermediate results. "
        "Only steps marked with '_volatile: True' are considered.",
        formatter_class=argparse.RawTextHelpFormatter,
        parents=[common_parser])
    
    volatilize_parser.add_argument(
        "--details",
        dest="details",
        action="store_true",
        default=False,
        help="Shows which files can be volatilized.")
    
    volatilize_parser.add_argument(
        "--srsly",
        dest="srsly",
        action="store_true",
        default=False,
        help="Replaces files marked for volatilization with a placeholder.")
    
    volatilize_parser.set_defaults(func=volatilize.main)
    
    # get arguments and call the appropriate function
    args = parser.parse_args()
    # create logger object
    logger = _configure_logger(args.verbose)
    # call subcommand
    args.func(args)

def _configure_logger(verbosity):
    logger = logging.getLogger("uap_logger")

    # create formatter for different log level
    debug_formatter = logging.Formatter(
        fmt = '[uap][%(levelname)s] %(funcName)s in %(filename)s: %(message)s '
    )
    info_formatter = logging.Formatter(
        fmt = '[uap][%(levelname)s]: %(message)s '
    )
    # create console handler
    ch = logging.StreamHandler()
    # set handler logging level
    ch.setLevel(logging.NOTSET)
    
    # Instantiate logger
    if verbosity == 0:
        # add formatter to ch
        ch.setFormatter(info_formatter)
        # set logger logging level
        logger.setLevel(logging.ERROR)
        sys.stderr.write("[uap] Set log level to ERROR\n")
    elif verbosity == 1:
        # add formatter to ch
        ch.setFormatter(info_formatter)
        # set logger logging level
        logger.setLevel(logging.WARNING)
        sys.stderr.write("[uap] Set log level to WARNING\n")
    elif verbosity == 2:
        # add formatter to ch
        ch.setFormatter(info_formatter)
        # set logger logging level
        logger.setLevel(logging.INFO)
        sys.stderr.write("[uap] Set log level to INFO\n")
    elif verbosity >= 3:
        # add formatter to ch
        ch.setFormatter(debug_formatter)
        # set logger logging level
        logger.setLevel(logging.DEBUG)
        sys.stderr.write("[uap] Set log level to DEBUG\n")

    sys.stderr.flush()

    # add ch to logger
    logger.addHandler(ch)

    return logger



if __name__ == '__main__':
    main()
